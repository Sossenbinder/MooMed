//----------------------
//This file was autogenerated by GrpcProxyGenerator.Service.GrpcProxyFactory
//Timestamp of generation: UTC 09-Dec-20 21:37:24
//----------------------

namespace MooMed.RemotingProxies.Proxies
{
	public class AccountServiceProxy : MooMed.RemotingProxies.ProxyInvocation.AbstractDeploymentProxy<MooMed.ServiceBase.Services.Interface.IAccountService>, MooMed.ServiceBase.Services.Interface.IAccountService
	{
		public AccountServiceProxy(MooMed.IPC.Grpc.Interface.IGrpcClientProvider clientProvider)
			: base(clientProvider,
				MooMed.Common.Definitions.IPC.DeploymentService.AccountService)
		{ }

		public System.Threading.Tasks.Task<MooMed.Core.DataTypes.ServiceResponse<MooMed.Common.Definitions.Models.User.LoginResult>> Login(
			MooMed.Common.Definitions.Models.User.LoginModel loginModel)
			=> InvokeWithResult(service => service.Login(
				loginModel));

		public System.Threading.Tasks.Task RefreshLoginForAccount(
			MooMed.Common.Definitions.IPC.Primitive<System.Int32> accountId)
			=> Invoke(service => service.RefreshLoginForAccount(
				accountId));

		public System.Threading.Tasks.Task<MooMed.Core.DataTypes.ServiceResponse<MooMed.Common.Definitions.Models.User.RegistrationResult>> Register(
			MooMed.Common.Definitions.Models.User.RegisterModel registerModel)
			=> InvokeWithResult(service => service.Register(
				registerModel));

		public System.Threading.Tasks.Task<MooMed.Core.DataTypes.ServiceResponse> LogOff(
			MooMed.Common.Definitions.Models.Session.Interface.ISessionContext sessionContext)
			=> InvokeWithResult(service => service.LogOff(
				sessionContext));

		public System.Threading.Tasks.Task<MooMed.Core.DataTypes.ServiceResponse<MooMed.Common.Definitions.Models.User.Account>> FindById(
			MooMed.Common.Definitions.IPC.Primitive<System.Int32> accountId)
			=> InvokeWithResult(service => service.FindById(
				accountId));

		public System.Threading.Tasks.Task<MooMed.Core.DataTypes.ServiceResponse<System.Collections.Generic.List<MooMed.Common.Definitions.Models.User.Account>>> FindAccountsStartingWithName(
			System.String name)
			=> InvokeWithResult(service => service.FindAccountsStartingWithName(
				name));

		public System.Threading.Tasks.Task<MooMed.Core.DataTypes.ServiceResponse<MooMed.Common.Definitions.Models.User.Account>> FindByEmail(
			System.String email)
			=> InvokeWithResult(service => service.FindByEmail(
				email));

		public System.Threading.Tasks.Task<MooMed.Core.DataTypes.ServiceResponse> AddAsFriend(
			MooMed.Common.Definitions.Models.User.AddAsFriendModel model)
			=> InvokeWithResult(service => service.AddAsFriend(
				model));

		public System.Threading.Tasks.Task<MooMed.Core.DataTypes.ServiceResponse<System.Collections.Generic.List<MooMed.Common.Definitions.Models.User.Friend>>> GetFriends(
			MooMed.Common.Definitions.Models.Session.Interface.ISessionContext sessionContext)
			=> InvokeWithResult(service => service.GetFriends(
				sessionContext));

		public System.Threading.Tasks.Task<MooMed.Core.DataTypes.ServiceResponse<MooMed.Common.Definitions.Models.User.ErrorCodes.IdentityErrorCode>> UpdatePersonalData(
			MooMed.Common.Definitions.Models.User.PersonalData personalData)
			=> InvokeWithResult(service => service.UpdatePersonalData(
				personalData));

		public System.Threading.Tasks.Task<MooMed.Core.DataTypes.ServiceResponse<MooMed.Common.Definitions.Models.User.ErrorCodes.IdentityErrorCode>> UpdatePassword(
			MooMed.Common.Definitions.Models.User.UpdatePassword updatePasswordData)
			=> InvokeWithResult(service => service.UpdatePassword(
				updatePasswordData));

	}
}
